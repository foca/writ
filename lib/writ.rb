require "scrivener"

class Writ < Scrivener
  # Public: Run the command with the provided input. Any arguments will be
  # forwarded to `Writ#new`.
  #
  # Returns a Writ::Outcome.
  def self.run(*args, &block)
    new(*args, &block).run!
  end

  # Internal: Runs your business logic, and assigns the return value of this
  # method as the Outcome's `#value`.
  #
  # Returns an Object.
  def run
    fail NotImplementedError
  end

  # Internal: Perform validations, run the business logic, and generate the
  # outcome to return.
  #
  # Returns a Writ::Outcome.
  def run!
    result = run if valid?
    Outcome.new(result, self)
  end

  class Outcome
    # Public: Get the return value of your Writ.
    attr_reader :value

    # Public: Get the Writ object, with the user input as accessors.
    attr_reader :input

    # Public: Get the errors Hash generated by running Writ.run. This will be an
    # empty Hash if no errors were returned.
    attr_reader :errors

    # Public: Initialize the outcome.
    #
    # value - The return value from Writ.run
    # writ  - The Writ instance.
    def initialize(value, writ)
      @value = value
      @input = writ
      @errors = writ.errors
    end

    # Public: Whether the Writ performed successfully or not (i.e. no errors are
    # present.)
    #
    # Returns Boolean.
    def success?
      errors.empty?
    end
  end
end
